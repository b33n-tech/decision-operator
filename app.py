import re
from typing import Dict, List

class GenerateurCadrage:
    def __init__(self):
        # Les cat√©gories de cadrage fondamentales
        self.sections = {
            "Contexte": [
                "Quel est le contexte r√©el du projet ?",
                "Qui a initi√© la demande ?",
                "Quel probl√®me cela est-il cens√© r√©soudre ?"
            ],
            "Objectifs": [
                "Quels sont les objectifs explicites ?",
                "Quels sont les objectifs implicites (non dits mais attendus) ?",
                "Y a-t-il un objectif prioritaire ?"
            ],
            "Moyens et contraintes": [
                "Quel est le budget disponible (ou √† confirmer) ?",
                "Quel est le d√©lai ?",
                "Quelles ressources humaines sont impliqu√©es ?",
                "Y a-t-il des contraintes techniques, l√©gales ou politiques connues ?"
            ],
            "Parties prenantes": [
                "Qui sont les acteurs directement impliqu√©s ?",
                "Qui sont les acteurs indirectement impact√©s ?",
                "Qui d√©cide r√©ellement (autorit√© finale) ?",
                "Qui ex√©cute (responsable op√©rationnel) ?"
            ],
            "Livrables et crit√®res de succ√®s": [
                "Quels sont les livrables attendus ?",
                "Quels crit√®res permettront de dire que le projet est r√©ussi ?",
                "Quels risques majeurs peuvent bloquer le succ√®s ?"
            ]
        }

    def generer_template(self, phrase_projet: str) -> Dict:
        """
        G√©n√®re un template de cadrage dynamique √† partir d'une phrase d'entr√©e floue.
        """
        # Essayer d'extraire automatiquement nom, action, et parties prenantes
        nom_projet = self._extraire_nom_projet(phrase_projet)
        action = self._extraire_action(phrase_projet)
        acteurs = self._extraire_acteurs(phrase_projet)

        # G√©n√©rer le texte √† trous
        texte_cadrage = self._generer_texte_cadrage(nom_projet, action, acteurs)
        json_cadrage = self._generer_json_structure(texte_cadrage)

        return {"texte": texte_cadrage, "structure": json_cadrage}

    def _extraire_nom_projet(self, texte: str) -> str:
        match = re.search(r"projet\s+([A-Za-z0-9\- ]+)", texte, re.IGNORECASE)
        return match.group(1).strip() if match else "Nom du projet √† pr√©ciser"

    def _extraire_action(self, texte: str) -> str:
        match = re.search(r"faire\s+([A-Za-z0-9\- ]+)", texte, re.IGNORECASE)
        return match.group(1).strip() if match else "Objectif √† clarifier"

    def _extraire_acteurs(self, texte: str) -> List[str]:
        acteurs = re.findall(r"avec\s+([A-Za-z0-9\- ,]+)", texte, re.IGNORECASE)
        if acteurs:
            return [a.strip() for a in acteurs[0].split(",")]
        return ["Parties prenantes √† identifier"]

    def _generer_texte_cadrage(self, nom_projet: str, action: str, acteurs: List[str]) -> str:
        texte = f"""
=== CADRAGE AUTOMATIQUE ===

üß© Projet : {nom_projet}
üéØ Objectif d√©clar√© : {action}
üë• Parties mentionn√©es : {', '.join(acteurs)}

--- CONTEXTE ---
{self._texte_a_trous(self.sections['Contexte'])}

--- OBJECTIFS ---
{self._texte_a_trous(self.sections['Objectifs'])}

--- MOYENS ET CONTRAINTES ---
{self._texte_a_trous(self.sections['Moyens et contraintes'])}

--- PARTIES PRENANTES ---
{self._texte_a_trous(self.sections['Parties prenantes'])}

--- LIVRABLES ET CRIT√àRES DE SUCC√àS ---
{self._texte_a_trous(self.sections['Livrables et crit√®res de succ√®s'])}

üß† Pense-b√™te :
- Tout ce qui n‚Äôest pas clarifi√© maintenant deviendra un probl√®me plus tard.
- Si tu ne sais pas ‚Äúqui d√©cide‚Äù, c‚Äôest toi par d√©faut.
"""
        return texte.strip()

    def _texte_a_trous(self, questions: List[str]) -> str:
        return "\n".join([f"‚Ä¢ {q} ‚Üí [_________________________]" for q in questions])

    def _generer_json_structure(self, texte: str) -> Dict:
        # Structure JSON r√©utilisable ou exportable vers interface
        structure = {}
        for section, questions in self.sections.items():
            structure[section] = [{"question": q, "r√©ponse": ""} for q in questions]
        return structure


# --- UTILISATION ---
if __name__ == "__main__":
    generateur = GenerateurCadrage()
    
    phrase = "On m‚Äôa fil√© le projet Horizon o√π ils veulent faire un prototype rapide avec les √©quipes data et design. Je n‚Äôai eu que √ßa comme info."
    
    resultat = generateur.generer_template(phrase)
    
    print(resultat["texte"])
